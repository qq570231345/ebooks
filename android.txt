package com.example.demo.main.excel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Proxy;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.ParseException;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.DefaultProxyRoutePlanner;
import org.apache.http.util.EntityUtils;
import org.apache.poi.openxml4j.util.ZipSecureFile;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.util.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;

public class TestMain {

    // 官网列
    static int HOMEPAGE = 2;
    // 当前版本日期列
    static int DATE = 3;
    // 安全问题求助列
    static int help = 4;
    // 源码列
    static int REPOSITORY = 5;
    // license列
    static int LICENSE = 6;
    // license 名称列
    static int LICENSE_NAME = 7;
    // 是有有漏洞列
    static int HAS_BUG = 8;
    // 漏洞地址
    static int BUGS_URL = 9;
    // 最新版本
    static int NEW_VERSION = 10;
    // 最新版本日期列
    static int NEW_DATE = 11;

    static Proxy urlProxy = null;
    static CloseableHttpClient httpClient = null;
    static String headerKey = null;
    static String headerValue = null;

    static {
        //HTTPS协议
//		System.setProperty("https.proxySet", "true");
//		System.setProperty("https.proxyHost", "proxy.huawei.com");
//		System.setProperty("https.proxyPort", "8080");

//        System.setProperty("http.proxyHost", "proxy.huawei.com");
//        System.setProperty("http.proxyPort", "8080");

//        urlProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("proxy.huawei.com", 8080));
//        headerKey = "Proxy-Authorization";
//        headerValue = "Basic " + Base64.encode("CHINA\\xwx866230:xu19950723.".getBytes());

        //设置代理服务器
        HttpClientBuilder custom = HttpClients.custom();
        HttpHost proxy = new HttpHost("proxy.huawei.com", 8080);
        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
        custom.setRoutePlanner(routePlanner);

        //设置代理认证
        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        credentialsProvider.setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT), new UsernamePasswordCredentials("CHINA\\xwx866230", "xu19950723."));
        custom.setDefaultCredentialsProvider(credentialsProvider);
        httpClient = custom.build();
    }



    public static void main(String[] args) {
        excelTest();
    }


    static void excelTest() {
        String filePath = "D:/test/工作簿1.xlsx";
        // 延迟解析比率
        ZipSecureFile.setMinInflateRatio(-0.1d);
        File file = new File(filePath);
        FileInputStream inputStream = null;
        Workbook workbook = null;
        OutputStream out = null;
        // 响应模型
        try {

            inputStream = new FileInputStream(file);
            workbook = WorkbookFactory.create(inputStream);
            inputStream.close();
            //工作表对象 第一个页签
            Sheet sheet = workbook.getSheetAt(0);
            CellStyle style = workbook.createCellStyle();
            style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
            style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            //总行数
            int rowLength = sheet.getLastRowNum() + 1;
            //工作表的行
            Row row = sheet.getRow(0);
            //总列数
            int colLength = row.getLastCellNum();
            //得到指定的单元格
            Cell cell = row.getCell(0);
            //得到单元格样式
//            System.out.println("行数：" + rowLength + ",列数：" + colLength);
            for (int i = 1; i < 3350; i++) {//5562
                System.out.println("行数：" + i + ",列数：" + colLength);
                row = sheet.getRow(i);
                if (row == null ) {
                    continue;
                }
                String currentVersion = null;
                try {
                    currentVersion = row.getCell(1).getStringCellValue();
                }catch (Exception e){
                    System.out.println(e.getMessage());
                    currentVersion = " ";
                }
                Map<String, String> info = getInfo(row.getCell(0).getStringCellValue(),currentVersion);
                cell = row.createCell(HOMEPAGE, CellType.STRING);
                cell.setCellValue(info.get("homepage"));
//                    System.out.println("homepage:"+info.get("homepage"));

                cell = row.createCell(DATE, CellType.STRING);
                cell.setCellValue(info.get("old_date"));

                cell = row.createCell(LICENSE_NAME, CellType.STRING);
                cell.setCellValue(info.get("license"));



                String repositoryUrl = null;
                if (!StringUtils.isEmpty(info.get("repository"))) {
                    String license = info.get("license");

                    cell = row.createCell(LICENSE, CellType.STRING);
                    if ("ISC".equals(license)){
                        cell.setCellValue(info.get("repository")+"/blob/master/LICENSE.txt");
                    }else if("MIT".equals(license)){
                        cell.setCellValue(info.get("repository")+"/master/LICENSE");
                    }else if("BSD".equals(license)){
                        cell.setCellValue(info.get("repository")+"/blob/master/LICENSE");
                    }else{
                        cell.setCellValue(info.get("repository")+"/master/LICENSE");
                        cell.setCellStyle(style);
                    }


                    cell = row.createCell(REPOSITORY, CellType.STRING);
                    try {
                        String repository = info.get("repository")+"/archive/v" + row.getCell(1).getStringCellValue() + ".zip";
                        //到 URL 所引用的远程对象的连接
//                        HttpGet httpGet = new HttpGet(repository);
//                        CloseableHttpResponse execute = httpClient.execute(httpGet);
//                        int statusCode = execute.getStatusLine().getStatusCode();
//                        //HTTPS协议
//                        //从 HTTP 响应消息获取状态码
                        cell.setCellValue(repository);
                    }catch (Exception e){
//                        System.out.println("repository:"+info.get("repository"));
                        cell.setCellValue(info.get("repository"));
                        cell.setCellStyle(style);
                    }
                }

                cell = row.createCell(BUGS_URL, CellType.STRING);
                cell.setCellValue(info.get("bugs"));
//                    System.out.println("bugs:"+info.get("bugs"));

                cell = row.createCell(NEW_VERSION, CellType.STRING);
                cell.setCellValue(info.get("new_version"));
//                    System.out.println("new_version:"+info.get("new_version"));

                cell = row.createCell(NEW_DATE, CellType.STRING);
                cell.setCellValue(info.get("new_date"));
//                    System.out.println("new_date:"+info.get("new_date"));
            }

            //将修改好的数据保存
            out = new FileOutputStream(file);
            workbook.write(out);
            out.close();

        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        } finally {
            try {
                if (workbook != null){
                    //将修改好的数据保存
                    out = new FileOutputStream(file);
                    workbook.write(out);
                    out.close();
                    if (out != null){
                        out.close();
                    }
                }
                // 释放资源
                if (httpClient != null) {
                    httpClient.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    static Map<String, String> getInfo(String name,String currentVersion) {
        String url = "https://www.npmjs.com/search?q=" + name;
        HashMap<String, String> mapInfo = new HashMap<>();
        // 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)
        // 创建Get请求
        HttpGet httpGet = new HttpGet(url);

        // 响应模型
        CloseableHttpResponse responseArray = null;
        CloseableHttpResponse responseInfo = null;
        try {

            // 由客户端执行(发送)Get请求
            responseArray = httpClient.execute(httpGet);
            // 从响应模型中获取响应实体
            HttpEntity responseEntity = responseArray.getEntity();
//            System.out.println("响应状态为:" + response.getStatusLine());
            if (responseEntity != null) {
                String substring = getContext(responseEntity);
                JSONObject jsonObject = JSON.parseObject(substring);
                JSONObject context = jsonObject.getJSONObject("context");
                JSONArray objects = context.getJSONArray("objects");
                if (objects == null) {
                    return mapInfo;
                }
                for (int i = 0; i < objects.size(); i++) {
                    JSONObject object = objects.getJSONObject(i);
                    JSONObject aPackage = object.getJSONObject("package");
                    if (name.equals(aPackage.getString("name"))) {
                        JSONObject links = aPackage.getJSONObject("links");
                        mapInfo.put("repository", links.getString("repository"));
                        mapInfo.put("homepage", links.getString("homepage"));
                        mapInfo.put("new_version", aPackage.getString("version"));
                        mapInfo.put("bugs", links.getString("bugs"));
                        JSONObject date = aPackage.getJSONObject("date");
                        if (date != null) {
                            String ts = date.getString("ts");
                            ts = getDateString(ts);
                            mapInfo.put("new_date", ts);
                        }

                        // 获取npmjs的详情URL
                        String npm = links.getString("npm");

                        // 创建Get请求
                        HttpGet httpGetInfo = new HttpGet(npm);
                        // 由客户端执行(发送)Get请求
                        responseInfo = httpClient.execute(httpGetInfo);
                        // 从响应模型中获取响应实体
                        HttpEntity responseInfoEntity = responseInfo.getEntity();
                        substring = getContext(responseInfoEntity);
                        if (!StringUtils.isEmpty(substring)){
                            JSONObject jsonObjectInfo = JSON.parseObject(substring);
                            JSONObject contextInfo = jsonObjectInfo.getJSONObject("context");
                            JSONObject packument = contextInfo.getJSONObject("packument");
                            mapInfo.put("license", packument.getString("license"));

                            // 获取当前版本
                            JSONArray versions = packument.getJSONArray("versions");
                            if (versions == null){
                                return mapInfo;
                            }
                            for (int j = 0; j < versions.size(); j++) {
                                JSONObject versionsJSONObject = versions.getJSONObject(j);
                                String version = versionsJSONObject.getString("version");
                                if (currentVersion.equals(version)){
                                    JSONObject dateJsonObject = versionsJSONObject.getJSONObject("date");
                                    if (dateJsonObject != null){
                                        String dateStr = getDateString(dateJsonObject.getString("ts"));
                                        mapInfo.put("old_date", dateStr);
                                    }
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        } finally {
            try {
                if (responseArray != null) {
                    responseArray.close();
                }
                if (responseInfo != null) {
                    responseInfo.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return mapInfo;

    }

    private static String getDateString(String ts) {
        if (!StringUtils.isEmpty(ts)) {
//                                    ts = ts.substring(0, ts.length() - 3);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy/MM/dd");
            Long aLong = Long.valueOf(ts);
            Date dateTs = new Date(aLong);
            ts = simpleDateFormat.format(dateTs);
        }
        return ts;
    }

    private static String getContext(HttpEntity responseEntity) throws IOException {
        String htmlStr = EntityUtils.toString(responseEntity);
        int end = htmlStr.indexOf("}</script>");
        int begin = htmlStr.indexOf("window.__context__ = ") + 21;
        if (begin > htmlStr.length() || end < 0) {
            return null;
        }
        return htmlStr.substring(htmlStr.indexOf("window.__context__ = ") + 21, htmlStr.indexOf("}</script>")) + "}";
    }


}
